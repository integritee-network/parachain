
//! Autogenerated weights for `pallet_teerex`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.2.0
//! DATE: 2025-08-28, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `caribe`, CPU: `12th Gen Intel(R) Core(TM) i7-1260P`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("integritee-rococo-local-dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/integritee-collator
// benchmark
// pallet
// --chain=integritee-rococo-local-dev
// --steps=50
// --repeat=20
// --pallet=pallet_teerex
// --extrinsic=*
// --heap-pages=4096
// --output=./polkadot-parachains/integritee-kusama/src/weights/pallet_teerex.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_teerex`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_teerex::WeightInfo for WeightInfo<T> {
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Teerex::SgxQuotingEnclaveRegistry` (r:1 w:0)
	/// Proof: `Teerex::SgxQuotingEnclaveRegistry` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Teerex::SgxTcbInfo` (r:1 w:0)
	/// Proof: `Teerex::SgxTcbInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Teerex::SgxAllowDebugMode` (r:1 w:0)
	/// Proof: `Teerex::SgxAllowDebugMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Teerex::SovereignEnclaves` (r:0 w:1)
	/// Proof: `Teerex::SovereignEnclaves` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_sgx_enclave() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `711`
		//  Estimated: `4176`
		// Minimum execution time: 2_437_384_000 picoseconds.
		Weight::from_parts(2_644_262_000, 0)
			.saturating_add(Weight::from_parts(0, 4176))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Teerex::SgxQuotingEnclaveRegistry` (r:0 w:1)
	/// Proof: `Teerex::SgxQuotingEnclaveRegistry` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn register_quoting_enclave() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `132`
		//  Estimated: `1493`
		// Minimum execution time: 1_183_466_000 picoseconds.
		Weight::from_parts(1_224_804_000, 0)
			.saturating_add(Weight::from_parts(0, 1493))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Teerex::SgxTcbInfo` (r:0 w:1)
	/// Proof: `Teerex::SgxTcbInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_tcb_info() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `132`
		//  Estimated: `1493`
		// Minimum execution time: 1_292_311_000 picoseconds.
		Weight::from_parts(1_304_141_000, 0)
			.saturating_add(Weight::from_parts(0, 1493))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Teerex::SovereignEnclaves` (r:1 w:1)
	/// Proof: `Teerex::SovereignEnclaves` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	fn unregister_sovereign_enclave() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `458`
		//  Estimated: `3923`
		// Minimum execution time: 16_609_000 picoseconds.
		Weight::from_parts(17_517_000, 0)
			.saturating_add(Weight::from_parts(0, 3923))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Teerex::ProxiedEnclaves` (r:1 w:1)
	/// Proof: `Teerex::ProxiedEnclaves` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	fn unregister_proxied_enclave() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `560`
		//  Estimated: `4025`
		// Minimum execution time: 20_900_000 picoseconds.
		Weight::from_parts(21_994_000, 0)
			.saturating_add(Weight::from_parts(0, 4025))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Teerex::SgxAllowDebugMode` (r:0 w:1)
	/// Proof: `Teerex::SgxAllowDebugMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Teerex::AllowSkippingAttestation` (r:0 w:1)
	/// Proof: `Teerex::AllowSkippingAttestation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_security_flags() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_008_000 picoseconds.
		Weight::from_parts(6_504_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}
