name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:
    inputs:
      verbose:
        description: "Set --verbose to get verbose build output"
        required: false
        default: 'true'

env:
  VERBOSE: ${{ github.events.input.verbose }}

jobs:
  cancel_previous_runs:
    name: Cancel Previous Runs
    runs-on: ubuntu-20.04
    steps:
      - uses: styfle/cancel-workflow-action@0.4.1
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}

  # rustfmt:
  #   name: Rustfmt (${{ matrix.os }})
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [ubuntu-20.04]
  #       rust: [stable]
  #   env:
  #     RUST_BACKTRACE: full
  #     RUSTC_WRAPPER: sccache
  #     SCCACHE_CACHE_SIZE: 300M
  #     SCCACHE_DIR: /home/runner/.cache/sccache
  #     SCCACHE_IDLE_TIMEOUT: 0
  #     FLV_SOCKET_WAIT: 600
  #     RUSTV: ${{ matrix.rust }}
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Install Rust ${{ matrix.rust }}
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: ${{ matrix.rust }}
  #         profile: minimal
  #         override: true
  #     - name: Check rustfmt
  #       run: cargo fmt --all -- --check

  build_primary_binaries:
    name: Primary build ${{ matrix.binary }} for ${{ matrix.rust-target }} on (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        rust: [stable]
        binary: [clippy]
    env:
      RUST_BACKTRACE: full
      RUSTV: ${{ matrix.rust }}
      TARGET: ${{ matrix.rust-target }}
      RUST_BIN_DIR: target/${{ matrix.rust-target }}/debug
      RELEASE_NAME: debug
    steps:
      - uses: actions/checkout@v2

      - name: Print env
        run: |
          echo "RUST_BIN_DIR = ${{ env.RUST_BIN_DIR }} "

      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          #profile: minimal
          override: true

      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.os }}-${{ env.RUST_BIN_DIR }}-${{ matrix.binary }}

      - name: Clippy
        if: ${{ matrix.binary == 'clippy' }}
        run: cargo clippy -- -D warnings

      - name: Release
        if: ${{ matrix.binary == 'release' }}
        run: cargo build --release

