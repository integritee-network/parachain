name: CI

on: 
  push: 
    branches:
      - master
    tags: 
      - '[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches: [master]
  workflow_dispatch:
    inputs:
      verbose:
        description: "Set --verbose to get verbose build output"
        required: false
        default: 'true'

env:
  VERBOSE: ${{ github.events.input.verbose }}
  SUBWASM_VERSION: 0.12.0


jobs:

  # this job set up dynamic configuration shared among jobs
  config:
    name: Set up Config
    runs-on: ubuntu-latest
    env:
      ENABLE_CHECK: true
    outputs:
      check: ${{ steps.check.outputs.check }}
      runs: ${{ steps.runs.outputs.runs }}
    steps:
      - id: check
        run: echo "::set-output name=check::${{ env.ENABLE_CHECK }}"

  cancel_previous_runs:
    name: Cancel Previous Runs
    runs-on: ubuntu-20.04
    steps:
      - uses: styfle/cancel-workflow-action@0.4.1
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}

  build_primary_binaries:
    name: Primary build ${{ matrix.binary }} for ${{ matrix.rust-target }} on (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        rust: [stable]
        binary: [release]
    env:
      RUST_BACKTRACE: full
      RUSTV: ${{ matrix.rust }}
      TARGET: ${{ matrix.rust-target }}
      RUST_BIN_DIR: target/${{ matrix.rust-target }}/debug
      RELEASE_NAME: debug
    steps:
      - uses: actions/checkout@v2

      - name: Print env
        run: |
          echo "RUST_BIN_DIR = ${{ env.RUST_BIN_DIR }} "

      # With rustup's nice new toml format, we just need to run rustup show to install the toolchain
      # https://github.com/actions-rs/toolchain/issues/126#issuecomment-782989659
      - name: Setup Rust toolchain
        run: rustup show

      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.os }}-${{ env.RUST_BIN_DIR }}-${{ matrix.binary }}

      - name: Release
        if: ${{ matrix.binary == 'release' }}
        run: cargo build --release
        
      # Upload artifacts
      - name: Upload integritee-collator
        uses: actions/upload-artifact@v2
        with:
          name: integritee-collator-${{ github.sha }}
          path: target/release/integritee-collator
          
      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}


  # Run all checks and unit test. This always run on debug mode
  check:
    name: Rust check ${{ matrix.check }} (${{ matrix.rust-target }})
    needs: config
    if: ${{ needs.config.outputs.check == 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
        rust-target: [x86_64-unknown-linux-gnu]
        check: [fmt, clippy]
    env:
      RUST_BACKTRACE: full
      RUSTV: ${{ matrix.rust }}
      TARGET: ${{ matrix.rust-target }}
    steps:
      - uses: actions/checkout@v2

      # With rustup's nice new toml format, we just need to run rustup show to install the toolchain
      # https://github.com/actions-rs/toolchain/issues/126#issuecomment-782989659
      - name: Setup Rust toolchain
        run: rustup show

      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.rust-target }}-${{ matrix.check }}

      - name: Fmt
        if: ${{ matrix.check == 'fmt' }}
        run: cargo fmt --all -- --check

      - name: Clippy
        if: ${{ matrix.check == 'clippy' }}
        run: cargo clippy -- -D warnings

  srtool:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        chain: ["shell", "integritee"]
    steps:
      - uses: actions/checkout@v2

      - name: Srtool build
        id: srtool_build
        uses: chevdor/srtool-actions@v0.3.0
        with:
          chain: ${{ matrix.chain }}
          runtime_dir: polkadot-parachains/${{ matrix.chain }}-runtime

      - name: Summary
        run: |
          echo '${{ steps.srtool_build.outputs.json }}' | jq > ${{ matrix.chain }}-srtool-digest.json
          cat ${{ matrix.chain }}-srtool-digest.json
          echo "Compact Runtime: ${{ steps.srtool_build.outputs.wasm }}"
          echo "Compressed Runtime: ${{ steps.srtool_build.outputs.wasm_compressed }}"

      - name: Archive Runtime
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.chain }}-runtime-${{ github.sha }}
          path: |
            ${{ steps.srtool_build.outputs.wasm }}
            ${{ steps.srtool_build.outputs.wasm_compressed }}
            ${{ matrix.chain }}-srtool-digest.json

      # We now get extra information thanks to subwasm
      - name: Install subwasm
        run: |
          wget https://github.com/chevdor/subwasm/releases/download/v${{ env.SUBWASM_VERSION }}/subwasm_linux_amd64_v${{ env.SUBWASM_VERSION }}.deb
          sudo dpkg -i subwasm_linux_amd64_v${{ env.SUBWASM_VERSION }}.deb
          subwasm --version

      - name: Show Runtime information
        shell: bash
        run: |
          subwasm info ${{ steps.srtool_build.outputs.wasm }}
          subwasm info ${{ steps.srtool_build.outputs.wasm_compressed }}
          subwasm --json info ${{ steps.srtool_build.outputs.wasm }} > ${{ matrix.chain }}-info.json
          subwasm --json info ${{ steps.srtool_build.outputs.wasm_compressed }} > ${{ matrix.chain }}-compressed-info.json

      - name: Extract the metadata
        shell: bash
        run: |
          subwasm meta ${{ steps.srtool_build.outputs.wasm }}
          subwasm --json meta ${{ steps.srtool_build.outputs.wasm }} > ${{ matrix.chain }}-metadata.json

# This is unsupported it wants to diff the metadata with a running chain. i.e. wss://kusama-<matrix.chain>-rpc.parity.io
#      - name: Check the metadata diff
#        shell: bash
#        run: |
#          subwasm diff ${{ steps.srtool_build.outputs.wasm }} --chain-b ${{ matrix.chain }} > ${{ matrix.chain }}-diff.txt
#          cat ${{ matrix.chain }}-diff.txt

      - name: Archive Subwasm results
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.chain }}-runtime-${{ github.sha }}
          path: |
            ${{ matrix.chain }}-info.json
            ${{ matrix.chain }}-compressed-info.json
            ${{ matrix.chain }}-metadata.json
#            ${{ matrix.chain }}-diff.txt

      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  docker:
    runs-on: ubuntu-20.04  
    needs: [build_primary_binaries]
    env:
      PARACHAIN_IMAGE_NAME: integritee/parachain
    steps:
      - uses: actions/checkout@v2

      - name: Download Integritee Collator
        uses: actions/download-artifact@v2
        with:
          name: integritee-collator-${{ github.sha }}

      - name: Set output
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      - name: Check output
        env:
          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
        run: |
          echo $RELEASE_VERSION
          echo ${{ steps.vars.outputs.tag }}
          echo ${{github.event.pull_request.number}}

      - name: Prepare docker versions
        id: prep
        run: |
          DOCKER_IMAGE=${{ env.PARACHAIN_IMAGE_NAME }}
          VERSION=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${{ steps.vars.outputs.tag }}
          fi
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"

          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi
          echo ::set-output name=tags::${TAGS}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
          echo "Version:   ${{ steps.prep.outputs.tags }}"

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push
        id: docker_push
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}

      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  create_artifacts:
    needs: [ build_primary_binaries, srtool ]
    runs-on: ubuntu-20.04
    env:
      CHAIN_SPEC: ${{ matrix.chain }}-${{ matrix.config }}
    strategy:
      fail-fast: false
      matrix:
        chain: [shell]
        config: [kusama]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: integritee-collator-${{ github.sha }}
          
      - name: 'Create binaries for artifacts'
        # Note: there is no way to pass the parachain-id to the `build-spec` cmd, which which imposes to set
        # `DEFAULT_PARA_ID=2015` in the `polkadot-parachains/command`.
        run: |
          chmod +x ./integritee-collator
          ./integritee-collator export-genesis-state --chain ${{ env.CHAIN_SPEC }} --parachain-id 2015 >  ${{ env.CHAIN_SPEC }}.state
          ./integritee-collator build-spec --chain ${{ env.CHAIN_SPEC }} --disable-default-bootnode --raw > ${{ env.CHAIN_SPEC }}.json


      - name: Compute file metadata
        id: vars
        run: |
          sha256sum ${{ env.CHAIN_SPEC }}.state >> checksums.txt
          sha256sum ${{ env.CHAIN_SPEC }}.json >> checksums.txt

      - name: Upload ${{ env.CHAIN_SPEC }} Files
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.CHAIN_SPEC }}-${{ github.sha }}
          path: |
            checksums.txt
            ${{ env.CHAIN_SPEC }}.state
            ${{ env.CHAIN_SPEC }}.json

      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: [srtool, build_primary_binaries, check]
    steps:
      - uses: actions/checkout@v2

      - name: Download Integritee Collator
        uses: actions/download-artifact@v2
        with:
          name: integritee-collator-${{ github.sha }}

      - name: Dowload shell runtime artifacts
        uses: actions/download-artifact@v2
        with:
          name: shell-runtime-${{ github.sha }}
          path: shell-runtime-${{ github.sha }}

      - name: Download integritee runtime artifacts
        uses: actions/download-artifact@v2
        with:
          name: integritee-runtime-${{ github.sha }}
          path: integritee-runtime-${{ github.sha }}

      - name: Create required package.json
        run: test -f package.json || echo '{}' >package.json

      - name: Changelog
        uses: scottbrenner/generate-changelog-action@master
        id: Changelog

      - name: Archive Integritee Runtime
        uses: thedoctor0/zip-release@master
        with:
          type: 'zip'
          filename: 'integritee-runtime-${{ github.sha }}.zip'
          path: integritee-runtime-${{ github.sha }}

      - name: Archive Shell Runtime
        uses: thedoctor0/zip-release@master
        with:
          type: 'zip'
          filename: 'shell-runtime-${{ github.sha }}.zip'
          path: shell-runtime-${{ github.sha }}
          
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: .

      - name: Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body: |
            ${{ steps.Changelog.outputs.changelog }}
          draft: false
          files: |
            integritee-collator
            shell-runtime-${{ github.sha }}.zip
            integritee-runtime-${{ github.sha }}.zip

      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}